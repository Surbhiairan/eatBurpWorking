Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = '/home/anjali/growler-prowler-master/node_modules/@expo/react-native-image-gallery/lib/ViewPager.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _Layout = require('./Layout');

var _Layout2 = _interopRequireDefault(_Layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ViewPager: {
    displayName: 'ViewPager'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/anjali/growler-prowler-master/node_modules/@expo/react-native-image-gallery/lib/ViewPager.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ViewPager = _wrapComponent('ViewPager')((_temp2 = _class = function (_React$Component) {
  _inherits(ViewPager, _React$Component);

  function ViewPager() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ViewPager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ViewPager.__proto__ || Object.getPrototypeOf(ViewPager)).call.apply(_ref, [this].concat(args))), _this), _this._onScrollEnd = function (_ref2) {
      var x = _ref2.nativeEvent.contentOffset.x;

      var index = parseInt(x / _Layout2.default.window.width, 10);
      _this.props.onPageSelected(index);
    }, _this._onPageSelected = function (_ref3) {
      var position = _ref3.nativeEvent.position;

      _this.props.onPageSelected(position);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ViewPager, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (_reactNative.Platform.OS === 'ios') {
        return _react3.default.createElement(_reactNative.ScrollView, _extends({
          automaticallyAdjustContentInsets: false,
          contentContainerStyle: { backgroundColor: 'transparent' },
          horizontal: true,
          pagingEnabled: true,
          onMomentumScrollEnd: this._onScrollEnd,
          ref: function ref(view) {
            _this2._scrollView = view;
          },
          removeClippedSubviews: true,
          alwaysBounceHorizontal: false,
          bounces: false,
          showsHorizontalScrollIndicator: false
        }, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        }));
      } else {
        return _react3.default.createElement(_reactNative.ViewPagerAndroid, _extends({}, this.props, {
          ref: function ref(view) {
            _this2._pager = view;
          },
          onPageSelected: this._onPageSelected,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 39
          }
        }));
      }
    }
  }, {
    key: 'scrollToPage',
    value: function scrollToPage(index) {
      if (_reactNative.Platform.OS === 'ios') {
        var scrollPositionX = index * _Layout2.default.window.width;
        this._scrollView.scrollTo({ y: 0, x: scrollPositionX, animated: false });
      } else {
        this._pager.setPageWithoutAnimation(index);
      }
    }
  }]);

  return ViewPager;
}(_react3.default.Component), _class.propTypes = {
  onPageSelected: _propTypes2.default.func.isRequired
}, _temp2));

exports.default = ViewPager;