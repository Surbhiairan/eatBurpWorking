Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/home/anjali/growler-prowler-master/node_modules/@expo/react-native-read-more-text/index.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var regeneratorRuntime = require('regenerator-runtime');

var _components = {
  ReadMore: {
    displayName: 'ReadMore'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/anjali/growler-prowler-master/node_modules/@expo/react-native-read-more-text/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ReadMore = _wrapComponent('ReadMore')(function (_React$Component) {
  _inherits(ReadMore, _React$Component);

  function ReadMore() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReadMore);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReadMore.__proto__ || Object.getPrototypeOf(ReadMore)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      measured: false,
      shouldShowReadMore: false,
      showAllText: false
    }, _this._handlePressReadMore = function () {
      _this.setState({ showAllText: true });
    }, _this._handlePressReadLess = function () {
      _this.setState({ showAllText: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReadMore, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var fullHeight, limitedHeight;
      return regeneratorRuntime.async(function componentDidMount$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(nextFrameAsync());

            case 2:
              _context.next = 4;
              return regeneratorRuntime.awrap(measureHeightAsync(this._text));

            case 4:
              fullHeight = _context.sent;

              this.setState({ measured: true });
              _context.next = 8;
              return regeneratorRuntime.awrap(nextFrameAsync());

            case 8:
              _context.next = 10;
              return regeneratorRuntime.awrap(measureHeightAsync(this._text));

            case 10:
              limitedHeight = _context.sent;


              if (fullHeight > limitedHeight) {
                this.setState({ shouldShowReadMore: true }, function () {
                  _this2.props.onReady && _this2.props.onReady();
                });
              }

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          measured = _state.measured,
          showAllText = _state.showAllText;
      var numberOfLines = this.props.numberOfLines;


      return _react3.default.createElement(
        _reactNative.View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 44
          }
        },
        _react3.default.createElement(
          _reactNative.Text,
          {
            numberOfLines: measured && !showAllText ? numberOfLines : 0,
            ref: function ref(text) {
              _this3._text = text;
            }, __source: {
              fileName: _jsxFileName,
              lineNumber: 45
            }
          },
          this.props.children
        ),
        this._maybeRenderReadMore()
      );
    }
  }, {
    key: '_maybeRenderReadMore',
    value: function _maybeRenderReadMore() {
      var _state2 = this.state,
          shouldShowReadMore = _state2.shouldShowReadMore,
          showAllText = _state2.showAllText;


      if (shouldShowReadMore && !showAllText) {
        if (this.props.renderTruncatedFooter) {
          return this.props.renderTruncatedFooter(this._handlePressReadMore);
        }

        return _react3.default.createElement(
          _reactNative.Text,
          { style: styles.button, onPress: this._handlePressReadMore, __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          },
          'Read more'
        );
      } else if (shouldShowReadMore && showAllText) {
        if (this.props.renderRevealedFooter) {
          return this.props.renderRevealedFooter(this._handlePressReadLess);
        }

        return _react3.default.createElement(
          _reactNative.Text,
          { style: styles.button, onPress: this._handlePressReadLess, __source: {
              fileName: _jsxFileName,
              lineNumber: 86
            }
          },
          'Hide'
        );
      }
    }
  }]);

  return ReadMore;
}(_react3.default.Component));

exports.default = ReadMore;


function measureHeightAsync(component) {
  return new Promise(function (resolve) {
    component.measure(function (x, y, w, h) {
      resolve(h);
    });
  });
}

function nextFrameAsync() {
  return new Promise(function (resolve) {
    return requestAnimationFrame(function () {
      return resolve();
    });
  });
}

var styles = _reactNative.StyleSheet.create({
  button: {
    color: '#888',
    marginTop: 5
  }
});