'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);var value = info.value;
        } catch (error) {
          reject(error);return;
        }if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            return step("next", value);
          }, function (err) {
            return step("throw", err);
          });
        }
      }return step("next");
    });
  };
}

var effectsMiddleware = exports.effectsMiddleware = function effectsMiddleware(effectsDefinitionArray) {
  var _waiting = {};

  var _effects = effectsDefinitionArray.reduce(function (result, effectDefinition) {
    var actionType = effectDefinition.action;
    var effect = effectDefinition.effect;
    var error = effectDefinition.error;

    result[actionType] = result[actionType] || [];
    effect.__errorHandler = error;
    result[actionType].push(effect);
    return result;
  }, {});

  var nextDispatchAsync = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(actionType) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _waiting[actionType] = _waiting[actionType] || [];

              return _context.abrupt('return', new Promise(function (resolve) {
                _waiting[actionType].push(resolve);
              }));

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function nextDispatchAsync(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var callEffect = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(effect, action, store) {
      var params;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              params = {
                action: action,
                dispatch: store.dispatch,
                getState: store.getState,
                nextDispatchAsync: nextDispatchAsync
              };

              if (!effect.__errorHandler) {
                _context2.next = 12;
                break;
              }

              _context2.prev = 2;
              _context2.next = 5;
              return effect(params);

            case 5:
              _context2.next = 10;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2['catch'](2);

              effect.__errorHandler(_extends({ error: _context2.t0 }, params));

            case 10:
              _context2.next = 13;
              break;

            case 12:
              effect(params);

            case 13:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined, [[2, 7]]);
    }));

    return function callEffect(_x2, _x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  return function (store) {
    return function (next) {
      return function (action) {
        var result = next(action);
        var actionEffects = _effects[action.type];

        if (actionEffects) {
          actionEffects.forEach(function (effect) {
            callEffect(effect, action, store);
          });
        }

        if (typeof _waiting[action.type] !== 'undefined') {
          _waiting[action.type].forEach(function (resolve) {
            return resolve(action);
          });
          delete _waiting[action.type];
        }
        return result;
      };
    };
  };
};